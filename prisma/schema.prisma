generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  phoneNumber  String        @unique
  password     String
  fullName     String
  province     String
  status       UserStatus    @default(PENDING)
  budget       Float         @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         Role          @default(USER)
  deviceToken  String?       // Device token for push notifications
  platform     String?       // Platform (ios/android)
  appVersion   String?       // App version
  language     String?       // Preferred language (e.g., 'en', 'ar', 'ku', 'tr')
  lastKnownLatitude  Float?  // Last known latitude for province tracking
  lastKnownLongitude Float?  // Last known longitude for province tracking
  lastLocationUpdate DateTime? // When the location was last updated
  driver       Driver?
  orders       Order[]
  taxiRequests TaxiRequest[]
  changedLogs  UserLog[]     @relation("ChangedBy")
  userLogs     UserLog[]     @relation("User")
  notifications Notification[]
}

model Driver {
  id           String        @id @default(cuid())
  fullName     String
  phoneNumber  String
  carId        String
  carType      String
  licenseId    String
  rate         Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  logs         DriverLog[]
  taxiRequests TaxiRequest[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TaxiRequest {
  id              String             @id @default(cuid())
  status          TaxiRequest_status @default(USER_WAITING)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  acceptedAt      DateTime?
  completedAt     DateTime?
  userId          String
  driverId        String?
  pickupLocation  String
  dropoffLocation String
  price           Float
  distance        Float
  userFullName    String
  userPhone       String
  userProvince    String
  tripType        String             @default("ECO")
  driverDeduction Float              @default(0)
  driverPhone     String?
  driverName      String?
  carId           String?
  carType         String?
  licenseId       String?
  driverRate      Float?
  dropoffLat      Float
  dropoffLng      Float
  pickupLat       Float
  pickupLng       Float
  driver          Driver?            @relation(fields: [driverId], references: [id])
  user            User               @relation(fields: [userId], references: [id])
}

model DriverLog {
  id        String   @id @default(cuid())
  driverId  String
  action    String
  details   String?
  createdAt DateTime @default(now())
  driver    Driver   @relation(fields: [driverId], references: [id])
}

model UserLog {
  id          String   @id @default(cuid())
  userId      String
  type        String
  details     String
  oldValue    String?
  newValue    String?
  createdAt   DateTime @default(now())
  changedById String
  changedBy   User     @relation("ChangedBy", fields: [changedById], references: [id])
  user        User     @relation("User", fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

model OTP {
  id          String   @id @default(cuid())
  phoneNumber String   @unique
  code        String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  DRIVER
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BLOCKED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum TaxiRequest_status {
  USER_WAITING
  DRIVER_ACCEPTED
  DRIVER_IN_WAY
  DRIVER_ARRIVED
  USER_PICKED_UP
  DRIVER_IN_PROGRESS
  TRIP_COMPLETED
  TRIP_CANCELLED
}

enum NotificationType {
  TRIP_STATUS_CHANGE
  DRIVER_ACCEPTED
  DRIVER_IN_WAY
  DRIVER_ARRIVED
  USER_PICKED_UP
  DRIVER_IN_PROGRESS
  TRIP_COMPLETED
  NEW_TRIP_AVAILABLE
  TRIP_CANCELLED
  SYSTEM_MESSAGE
}
